#include "nrf24l01p.h"
#include <avr32/io.h>
#include <compiler.h>
#include <power_clocks_lib.h>

//#include "print_funcs.h"
#include <intc.h>
#include <pm.h>
#include <delay.h>
#include <stdint.h>
#include <flashc.h>
#include <stdlib.h>
#include <stdio.h>
#include "twi.h"
#include "tc.h"
#include "gpio.h"
//#include "usart.h"
#include "board.h"
#include <math.h>
#include "algorithm.h"
#include "matrix.h"

//------------------  C O N F I G U R A T I O N S  -------------------

#define GYRO 				0x68
#define ACCEL 				0x40
#define MAG 				0x1E

#define GYRO_START			0x1D
#define ACCEL_START			0x02
#define MAG_START			0x03
//------------------  D E F I N I T I O N S  -------------------
#define FOSC0 12000000
#define FPLL 84000000/2
#define FPBA FPLL/2
#define PPBB FPLL/2

//! \brief Constants to define the sent and received pattern
//#define  PATTERN_TEST_LENGTH        (sizeof(test_pattern)/sizeof(U8))
#ifndef PI
#define PI 3.1415926
#endif

const U8 test_pattern[] =  {
   0xAA,
   0x55,
   0xA5,
   0x5A,
   0x77,
   0x99};
const U8 GYRO_0x12_SETUP[] = {0b01110001};
const U8 GYRO_0x16_SETUP[] = {0x03}; //+-250/sec
const int GYRO_RANGE = 250;
const U8 ACCEL_0x30_SETUP[] = {0x01};
const U8 MAG_0x00_SETUP[] = {0x70};
const U8 MAG_0x01_SETUP[] = {0x00};
const U8 MAG_0x02_SETUP[] = {0x00};
#define  DATA_LENGTH        (sizeof(GYRO_0x12_SETUP)/sizeof(U8))  // =1

#define	 buffer_length		(6*sizeof(GYRO_0x12_SETUP)/sizeof(U8)) // =6

#define TWI_SPEED             150000
//------------------USART DEF-------------------------------------------
#  define EXAMPLE_TARGET_PBACLK_FREQ_HZ FPBA  // PBA clock target frequency, in Hz

#  define EXAMPLE_USART               (&AVR32_USART1)
#  define EXAMPLE_USART_RX_PIN        AVR32_USART1_RXD_0_0_PIN
#  define EXAMPLE_USART_RX_FUNCTION   AVR32_USART1_RXD_0_0_FUNCTION
#  define EXAMPLE_USART_TX_PIN        AVR32_USART1_TXD_0_0_PIN
#  define EXAMPLE_USART_TX_FUNCTION   AVR32_USART1_TXD_0_0_FUNCTION
#  define EXAMPLE_USART_CLOCK_MASK    AVR32_USART1_CLK_PBA
#  define EXAMPLE_PDCA_CLOCK_HSB      AVR32_PDCA_CLK_HSB
#  define EXAMPLE_PDCA_CLOCK_PB       AVR32_PDCA_CLK_PBA


//------BUS SEL
#define BUS_SEL_0 AVR32_PIN_PA05
#define BUS_SEL_1 AVR32_PIN_PA06
#define BUS_SEL_2 AVR32_PIN_PA07


//------------------TIME COUNTER INTERRUPT DEF--------------------------

#  define EXAMPLE_TC                  (&AVR32_TC)
#  define EXAMPLE_TC_IRQ_GROUP        AVR32_TC_IRQ_GROUP
#  define EXAMPLE_TC_IRQ              AVR32_TC_IRQ0
#  define EXAMPLE_TOGGLED_PIN         AVR32_PIN_PA23
//#  define FPBA                        FPLL

#define TC_CHANNEL    0

volatile static int print_sec = 1;
volatile U32 tc_tick = 0;

#if defined (__GNUC__)
__attribute__((__interrupt__))
#elif defined (__ICCAVR32__)
#pragma handler = EXAMPLE_TC_IRQ_GROUP, 1
__interrupt
#endif
static void tc_irq(void)
{
  // Increment the ms seconds counter
  tc_tick++;

  // Clear the interrupt flag. This is a side effect of reading the TC SR.
  tc_read_sr(EXAMPLE_TC, TC_CHANNEL);

  // specify that an interrupt has been raised
  print_sec = 1;
  // Toggle a GPIO pin (this pin is used as a regular GPIO pin).
  gpio_tgl_gpio_pin(EXAMPLE_TOGGLED_PIN);


}

//--------------------------------------------------------------------------------------------------------------
//----------------------------------------- T W I   M A S T E R ------------------------------------------------
//--------------------------------------------------------------------------------------------------------------

/*! \brief Main function.
 */
/*
void set_packet(twi_package_t *package, unsigned short device, unsigned short reg_addr, U8 buffer)
{
	  // TWI chip address to communicate with
	  package->chip = device;
	  // TWI address/commands to issue to the other chip (node)
	  package->addr = reg_addr;
	  // Length of the TWI data address segment (1-3 bytes)
	  package->addr_length = 1;
	  // Where to find the data to be written
	  package->buffer = (void*)buffer;
	  // How many bytes do we want to write
	  package->length = 1;

}
*/


void myitoa(int number,char* c)
{

	bool neg = false;
	if (number<0)
	{
		number = -number;
		neg = true;
	}

	if(neg)
		c[0] = '-';
	else
		c[0] = '0';

	int i;
	c[6]='\0';
	for(i=5;i>0;i--)
	{

		if(number==0)
			c[i]=0x30;
		else
		{
			c[i] = 0x30+(number%10);
			number = number/10;
		}

	}
}

int twoU8toint(U8 H,U8 L)
{
	int output;
	U8 temp_L;
	U16 temp_H;
	if ((H & (1<<7)) != 0)
	{
		temp_H= (~H<<8) & 0xFF00;
		temp_L= ((~L)+1) & 0x00FF;
		output=-(int)(temp_H|temp_L);
	}
	else
	{
		temp_H=(H<<8)&0xFF00;
		temp_L = L;
		output=(int)(temp_H|temp_L);

	}
	return output;
}


int main(void)
{


		gpio_enable_gpio_pin(BUS_SEL_0);
		gpio_enable_gpio_pin(BUS_SEL_1);
		gpio_enable_gpio_pin(BUS_SEL_2);
		gpio_set_gpio_pin(BUS_SEL_0);
		gpio_clr_gpio_pin(BUS_SEL_1);
		gpio_set_gpio_pin(BUS_SEL_2);

	  //------------------TWI INIT---------------------------------
	  //enable TWI PORTS
	    static const gpio_map_t TWI_GPIO_MAP =
	    {
	      {AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
	      {AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION}
	    };
	    twi_options_t opt;
	    twi_package_t packet;
	    twi_package_t GYRO_DATA;
	    twi_package_t ACCEL_DATA;
	    twi_package_t MAG_DATA;

	    int status;


	    U8 gyro_received[6] = {0};
	    U8 accel_received[6] = {0};
	    U8 mag_received[6] = {0};

	    // Switch to oscillator 0


	  /*
	    // Init debug serial line
	    init_dbg_rs232(FOSC0);

	    // Display a header to user
	    print_dbg("\x0C\r\nTWI Example\r\nMaster!\r\n");
	  */

		 // Switch the CPU main clock to PLL0


	    // TWI gpio pins configuration

	    gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
	    // options settings
	    opt.pba_hz = FPBA;
	    opt.speed = TWI_SPEED;
	    opt.chip = GYRO;//not used

	    // initialize TWI driver with options

	    status = twi_master_init(&AVR32_TWI, &opt);

		  pm_enable_osc0_crystal(&AVR32_PM, FOSC0); //start OSC0
		  pm_enable_clk0(&AVR32_PM, 3); //Enable CLK0
		  pm_pll_setup(&AVR32_PM, 0, 6, 1, 0, 16); // Set PPL0, Let Fvco be 7/1*Fosc= 7*12Mhz=84Mhz
		  pm_pll_set_option(&AVR32_PM, 0, 1, 1, 0); // set PPL Option, Let FPLL=Fvco=84Mhz
		  pm_pll_enable(&AVR32_PM, 0);
		  pm_wait_for_pll0_locked(&AVR32_PM);
		  flashc_set_wait_state(1);
		  pm_cksel(&AVR32_PM, 1, 0, 1, 0, 0, 0); // Set Clock for each bus
		  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCSEL_PLL0); //main clock to be PLL0
	    //pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
	  //---------DATA ACQ INIT-----------
	   signed int gyro_x,gyro_y,gyro_z,accel_x,accel_y,accel_z,mag_x,mag_y,mag_z;

//--------------------SPI & nRF INIT---------------------------

	static const gpio_map_t NRF24L01P_SPI_GPIO_MAP =
	  {
		{AVR32_PIN_PA15, AVR32_SPI_SCK_0_0_FUNCTION},
	    {AVR32_PIN_PA28, AVR32_SPI_MISO_0_2_FUNCTION},
	    {AVR32_PIN_PA14, AVR32_SPI_MOSI_0_0_FUNCTION},
	    {AVR32_PIN_PA16, AVR32_SPI_NPCS_0_0_FUNCTION}
	  };


	 // Switch the CPU main clock to oscillator 0

//	 pm_enable_osc0_crystal(&AVR32_PM, FOSC0); //start OSC0
//	 pm_enable_clk0(&AVR32_PM, 3); //Enable CLK0
//
//	 pm_pll_setup(&AVR32_PM, 0, 6, 1, 0, 16); // Set PPL0, Let VCO be 84Mhz
//	 pm_pll_set_option(&AVR32_PM, 0, 0, 0, 0); // set PPL Option, Let Fvco=84Mhz
//	 pm_pll_enable(&AVR32_PM, 0);
//	 pm_wait_for_pll0_locked(&AVR32_PM);
//	 flashc_set_wait_state(1);
//	 pm_cksel(&AVR32_PM, 1, 0, 1, 0, 0, 0); // Set Clock for each bus
//	 pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCSEL_PLL0); //main clock to be PLL0

	 //INTC_init_interrupts();
	 // pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);



		gpio_enable_gpio_pin(AVR32_PIN_PA23);
		   gpio_set_gpio_pin(AVR32_PIN_PA23);	//enabled
		   //gpio_set_gpio_pin(AVR32_PIN_PA23); //100 set for channel 4


	  // add the spi options driver structure for NRF24L01P
	  spi_options_t spiOptions =
	  {
	    .reg          = 0, //Channel, unsure, should be 0
	    .baudrate     = 2000000,
	    .bits         = 8,
	    .spck_delay   = 0,
	    .trans_delay  = 0,
	    .stay_act     = 1,
	    .spi_mode     = 0,
	    .modfdis      = 1
	  };

	  // Assign I/Os to SPI
	  gpio_enable_module(NRF24L01P_SPI_GPIO_MAP,
	                     sizeof(NRF24L01P_SPI_GPIO_MAP) / sizeof(NRF24L01P_SPI_GPIO_MAP[0]));

	  // Initialize as master
	  spi_initMaster(&AVR32_SPI, &spiOptions);

	  // Set selection mode: variable_ps, pcs_decode, delay
	  spi_selectionMode(&AVR32_SPI, 0, 0, 0);

	  // Enable SPI
	  spi_enable(&AVR32_SPI);

	  // setup chip registers
	  spi_setupChipReg(&AVR32_SPI, &spiOptions, FPBA);

	  // configure local push buttons



//	  dip204_example_configure_push_buttons_IT();
//
//	  // configure local joystick
//	  dip204_example_configure_joystick_IT();

	  // initialize delay driver
	  delay_init(FPLL);

	  // initialize NRF24L01P
	  //dip204_init(backlight_PWM, TRUE);

	  // reset marker
	  //current_char = 0x10;

	  // Display default message.
//	  dip204_set_cursor_position(8,1);
//	  dip204_write_string("ATMEL");
//	  dip204_set_cursor_position(7,2);
//	  dip204_write_string("EVK1100");
//	  dip204_set_cursor_position(6,3);
//	  dip204_write_string("AVR32 UC3");
//	  dip204_set_cursor_position(3,4);
//	  dip204_write_string("AT32UC3A Series");
//	  dip204_hide_cursor();

	  //Initializing NRF24L01P
	  NRF24L01P_Init(NRF24L01P_mProperty);

	  Enable_global_interrupt();
/*	  //-----------------USART INIT--------------------------------
	  	  static const gpio_map_t USART_GPIO_MAP =
	  	  {
	  	    {EXAMPLE_USART_RX_PIN, EXAMPLE_USART_RX_FUNCTION},
	  	    {EXAMPLE_USART_TX_PIN, EXAMPLE_USART_TX_FUNCTION}
	  	  };

	  	  // USART options.

	  	  static const usart_options_t USART_OPTIONS =
	  	  {
	  	    .baudrate     = 57600,
	  	    .charlength   = 8,
	  	    .paritytype   = USART_NO_PARITY,
	  	    .stopbits     = USART_1_STOPBIT,
	  	    .channelmode  = USART_NORMAL_CHMODE
	  	  };

	  	  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
	  	   // frequency FOSC0) with an appropriate startup time then switch the main clock
	  	   // source to Osc0.

//	  	  //pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

	  	  // Assign GPIO to USART.
	  	  gpio_enable_module(USART_GPIO_MAP,
	  	                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));

	  	  // Initialize USART in RS232 mode.
	  	  usart_init_rs232(EXAMPLE_USART, &USART_OPTIONS, EXAMPLE_TARGET_PBACLK_FREQ_HZ);


*/

	//pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);





		  //--------------TIMER COUNTER INTERRUPT INIT--------------------
		    volatile avr32_tc_t *tc = EXAMPLE_TC;

		    static const tc_waveform_opt_t WAVEFORM_OPT =
		    {
		      .channel  = TC_CHANNEL,                        // Channel selection.

		      .bswtrg   = TC_EVT_EFFECT_NOOP,                // Software trigger effect on TIOB.
		      .beevt    = TC_EVT_EFFECT_NOOP,                // External event effect on TIOB.
		      .bcpc     = TC_EVT_EFFECT_NOOP,                // RC compare effect on TIOB.
		      .bcpb     = TC_EVT_EFFECT_NOOP,                // RB compare effect on TIOB.

		      .aswtrg   = TC_EVT_EFFECT_NOOP,                // Software trigger effect on TIOA.
		      .aeevt    = TC_EVT_EFFECT_NOOP,                // External event effect on TIOA.
		      .acpc     = TC_EVT_EFFECT_NOOP,                // RC compare effect on TIOA: toggle.
		      .acpa     = TC_EVT_EFFECT_NOOP,                // RA compare effect on TIOA: toggle (other possibilities are none, set and clear).

		      .wavsel   = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER,// Waveform selection: Up mode with automatic trigger(reset) on RC compare.
		      .enetrg   = FALSE,                             // External event trigger enable.
		      .eevt     = 0,                                 // External event selection.
		      .eevtedg  = TC_SEL_NO_EDGE,                    // External event edge selection.
		      .cpcdis   = FALSE,                             // Counter disable when RC compare.
		      .cpcstop  = FALSE,                             // Counter clock stopped with RC compare.

		      .burst    = FALSE,                             // Burst signal selection.
		      .clki     = FALSE,                             // Clock inversion.
		      .tcclks   = TC_CLOCK_SOURCE_TC3                // Internal source clock 3, connected to fPBA / 8.
		    };

		    static const tc_interrupt_t TC_INTERRUPT =
		    {
		      .etrgs = 0,
		      .ldrbs = 0,
		      .ldras = 0,
		      .cpcs  = 1,
		      .cpbs  = 0,
		      .cpas  = 0,
		      .lovrs = 0,
		      .covfs = 0
		    };

		    //pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

		    Disable_global_interrupt();

			#if defined (__GNUC__)
			  // Initialize interrupt vectors.
			  //INTC_init_interrupts();

			  // Register the RTC interrupt handler to the interrupt controller.
			  INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, AVR32_INTC_INT1);
			#endif

		    Enable_global_interrupt();

		    // Initialize the timer/counter.
		    tc_init_waveform(tc, &WAVEFORM_OPT);         // Initialize the timer/counter waveform.

		    // Set the compare triggers.
		    // Remember TC counter is 16-bits, so counting second is not possible with fPBA = 12 MHz.
		    // We configure it to count ms.
		    // We want: (1/(fPBA/8)) * RC = 0.001 s, hence RC = (fPBA/8) / 1000 = 1500 to get an interrupt every 1 ms.
		    tc_write_rc(tc, TC_CHANNEL, (FPBA / 8) / 1000); // Set RC value.

		    tc_configure_interrupts(tc, TC_CHANNEL, &TC_INTERRUPT);

		    // Start the timer/counter.
		    tc_start(tc, TC_CHANNEL);                    // And start the timer/counter.


	  //-------------SPI OUTPUT STUFF-----


			  //-------------------TWI SENDING INITIALIZATION DATA TO SENSOR---------------
			  //gyro initialization 1
			    packet.chip = GYRO;
			    packet.addr = 0x12;
			    packet.addr_length = 1;
			    packet.buffer = (void*)GYRO_0x12_SETUP;
			    packet.length = DATA_LENGTH;

			    status = twi_master_write(&AVR32_TWI, &packet);

			  // gyro initialzation 2
			    packet.chip = GYRO;
			    packet.addr = 0x16;
			    packet.addr_length = 1;
			    packet.buffer = (void*)GYRO_0x16_SETUP;
			    packet.length = DATA_LENGTH;
			    //set_packet(packet,GYRO,0x16,0x03);
			    status = twi_master_write(&AVR32_TWI, &packet);

			  //accelerometer initialzation 1
			    packet.chip = ACCEL;
			    packet.addr = 0x30;
			    packet.addr_length = 1;
			    packet.buffer = (void*)ACCEL_0x30_SETUP;
			    packet.length = DATA_LENGTH;
			    //set_packet(packet,GYRO,0x16,0x03);

			    status = twi_master_write(&AVR32_TWI, &packet);

			  //Magnetometer initialization 1
			    packet.chip = MAG;
			    packet.addr = 0x00;  //CRA
			    packet.addr_length = 1;
			    packet.buffer = (void*)MAG_0x00_SETUP;
			    packet.length = DATA_LENGTH;

			    status = twi_master_write(&AVR32_TWI, &packet);
			  //Magnetometer initialization 2
			    packet.chip = MAG;
			    packet.addr = 0x01; //CRB
			    packet.addr_length = 1;
			    packet.buffer = (void*)MAG_0x01_SETUP;
			    packet.length = DATA_LENGTH;

			    status = twi_master_write(&AVR32_TWI, &packet);
			  //Magnetometer initialization 3
			    packet.chip = MAG;
			    packet.addr = 0x02;
			    packet.addr_length = 1;
			    packet.buffer = (void*)MAG_0x02_SETUP;
			    packet.length = DATA_LENGTH;

			    status = twi_master_write(&AVR32_TWI, &packet);
			    /*  // check write result
			      if (status == TWI_SUCCESS)
			      {
			        // display test result to user
			        print_dbg("Write test:\tPASS\r\n");
			      }
			      else
			      {
			        // display test result to user
			        print_dbg("Write test:\tFAIL\r\n");
			      }
			    */
			  //---------------------READ---------------------------------

			  //setup for reading GYRO's data


			    //GYRO_DATA.buffer = (void*)gyro_received;


			  //setup for reading accelerometer data
			    ACCEL_DATA.chip = ACCEL ;
			    ACCEL_DATA.addr_length = 1;
			    ACCEL_DATA.length = 6;
			    ACCEL_DATA.addr = ACCEL_START;
			    ACCEL_DATA.buffer = (void*)accel_received;

			  //setup for reading accelerometer data
			    MAG_DATA.chip = MAG;
			    MAG_DATA.addr_length = 1;
			    MAG_DATA.length = 6;
			    MAG_DATA.addr = MAG_START;
			    MAG_DATA.buffer = (void*)mag_received;

			      GYRO_DATA.chip = GYRO ;
			      GYRO_DATA.addr_length = 1;
			      GYRO_DATA.addr = 0x1D;//GYRO_START;
				  GYRO_DATA.buffer = (void*)gyro_received;
				  GYRO_DATA.length = 6;
	  //perform reading

	//computation parameters
				  float gx,gy,gz,ax,ay,az,mx,my,mz;
				  float norm,temp;
				  float angle1,angle2,angle3;
				  quat q,qout;
						q.q0=0.5;
				  	  	q.q1=0.5;
				  	  	q.q2=0.5;
				  	  	q.q3=0.5;
				  int gyro_offsetx,gyro_offsety,gyro_offsetz;
				  gyro_offsetx=220;
				  gyro_offsety=260;
				  gyro_offsetz=-10;

					matrix4by1 temp11,temp12;
					matrix4by4 F,Q,P_predicted,K,temp1,temp2,temp3;
					matrix4by4 P_update={2,0,0,0,\
							             0,2,0,0,\
							             0,0,2,0,\
							             0,0,0,2};
					matrix4by4 H={1,0,0,0,\
									  0,1,0,0,\
									  0,0,1,0,\
									  0,0,0,1};
					matrix4by4 R={0.01,0,0,0,\
								  0,0.01,0,0,\
								  0,0,0.01,0,\
								  0,0,0,0.01};
					matrix4by1 qob;

					matrix4by1 q_update={0.5,0.5,0.5,0.5};
					matrix4by1 q_predicted={0.5,0.5,0.5,0.5};

	//output stuff
	char a[7],*c;
	 c=&a[0];

	    while(1)
	    {
		  if((print_sec) && (!(tc_tick%40)))//every 40 ms
		  {

		  	  		  print_sec=0;

	    	twi_master_read(&AVR32_TWI, &GYRO_DATA);
	    	delay_ms(1);
	    	twi_master_read(&AVR32_TWI, &ACCEL_DATA);
	    	delay_ms(10);
	    	twi_master_read(&AVR32_TWI, &MAG_DATA);
	    	delay_ms(1);


	  	  //perform reading



/*			  ACCEL_DATA.buffer = (void*)accel_received[0];
			  ACCEL_DATA.length = 4;
			  MAG_DATA.buffer = (void*)mag_received[0];
			  MAG_DATA.length = 4;*/






	  	  // -32768 < gyro_x < 32767, -250 < d/s < 250
	  	  gyro_x = twoU8toint(gyro_received[0],gyro_received[1]);
	  	  gyro_y = twoU8toint(gyro_received[2],gyro_received[3]);
	  	  gyro_z = twoU8toint(gyro_received[4],gyro_received[5]);

	  	  accel_x = twoU8toint(accel_received[1],accel_received[0]);
	  	  accel_y = twoU8toint(accel_received[3],accel_received[2]);
	  	  accel_z = twoU8toint(accel_received[5],accel_received[4]);

	  	  mag_x = twoU8toint(mag_received[0],mag_received[1]);
	  	  mag_y = twoU8toint(mag_received[2],mag_received[3]);
	  	  mag_z = twoU8toint(mag_received[4],mag_received[5]);

		    //--------------------
//		  //---------------ALGORITHM---------------------
//	  	gx = ((float)(gyro_x-gyro_offsetx))/32768*250;
//	  	gy = ((float)(gyro_y-gyro_offsety))/32768*250;
//	  	gz = ((float)(gyro_z-gyro_offsetz))/32768*250;
//
//
//	  	ax = (float)accel_x;
//	    ay = (float)accel_y;
//	  	az = (float)accel_z;
//	  	temp=ax;
//	  	ax=-ay;
//	  	ay=ax;
//
//	  	mx = (float)mag_x;
//	  	my = (float)mag_y;
//	  	mz = (float)mag_z;
//	  	temp=mx;
//	  	mx=my;
//	  	my=-mx;
//
//	  	norm = sqrtf(ax*ax+ay*ay+az*az);
//	  	ax = ax/norm;
//	  	ay = ay/norm;
//	  	az = az/norm;
//
//	  	norm = sqrtf(mx*mx+my*my+mz*mz);
//	  	mx = mx/norm;
//	  	my = my/norm;
//	  	mz = mz/norm;
//
//	  	//Gauss-Newton
//
//
//	  	qout=GN(&q,ax,ay,az,mx,my,mz);
//	  	q=qout;
//
//	  	//Kalman filter
////
////	  	qob.m1=qout.q0;
////	  	qob.m2=qout.q1;
////	  	qob.m3=qout.q2;
////	  	qob.m4=qout.q3;
////
////
////	  	float var1=(0.5647/180*PI)*(0.5647/180*PI);
////	  	float var2=(0.5674/180*PI)*(0.5674/180*PI);
////	  	float var3=(0.5394/180*PI)*(0.5394/180*PI);
////
////
////
////
////	    F.m11=1;F.m12=-dt*gx;F.m13=-dt*gy;F.m14=-dt*gz;
////	    F.m21=dt*gx;F.m22=1;F.m23=dt*gz;F.m24=-dt*gy;
////	    F.m31=dt*gy;F.m32=-dt*gz;F.m33=1;F.m34=dt*gx;
////	    F.m41=-dt*gz;F.m42=dt*gy;F.m43=-dt*gx;F.m44=1;
////
////		matrix_mul_4_1(&q_predicted,&F,&q_update);
////
////		Q.m11=var1+var2+var3;
////		Q.m12=-var1+var2-var3;
////		Q.m13=-var1-var2+var3;
////		Q.m14=var1-var2-var3;
////
////		Q.m21=-var1+var2-var3;
////		Q.m22=var1+var2+var3;
////		Q.m23=var1-var2-var3;
////		Q.m24=-var1-var2+var3;
////
////		Q.m31=-var1-var2+var3;
////		Q.m32=var1-var2-var3;
////		Q.m33=var1+var2+var3;
////		Q.m34=-var1+var2-var3;
////
////		Q.m41=var1-var2-var3;
////		Q.m42=-var1+var2-var3;
////		Q.m43=-var1+var2-var3;
////		Q.m44=var1+var2+var3;
////
////
////
////		//P_predicted
////		matrix_transpose_4_4(&temp3,&F);//temp3=F'
////		matrix_mul_4_4(&temp1,&P_update,&temp3);
////		matrix_mul_4_4(&temp2,&F,&temp1);
////		matrix_add_4_4(&P_predicted,&temp2,&Q);
////
////		//K
////		matrix_transpose_4_4(&temp3,&H);//temp3=H'
////		matrix_mul_4_4(&temp2,&P_predicted,&temp3);
////		matrix_mul_4_4(&temp1,&H,&temp2);
////		matrix_add_4_4(&temp2,&temp1,&R);
////		matrix_invert_4_4(&temp1,&temp2);
////		//K continued
////		matrix_mul_4_4(&temp2,&temp3,&temp1);
////		matrix_mul_4_4(&K,&P_predicted,&temp2);
////		//q_update
////		matrix_mul_4_1(&temp11,&H,&q_predicted);
////		matrix_sub_1_1(&temp12,&qob,&temp11);
////		matrix_mul_4_1(&temp11,&K,&temp12);
////		matrix_add_1_1(&q_update,&q_predicted,&temp11);
////
////		//normalize
////		norm=sqrtf(q_update.m1*q_update.m1+q_update.m2*q_update.m2+q_update.m3*q_update.m3+q_update.m4*q_update.m4);
////		q_update.m1=q_update.m1/norm;
////		q_update.m2=q_update.m2/norm;
////		q_update.m3=q_update.m3/norm;
////		q_update.m4=q_update.m4/norm;
////
////		//P_update
////		matrix_mul_4_4(&temp1,&K,&H);
////		matrix_sub_4_4(&temp2,&H,&temp1);
////		matrix_mul_4_4(&P_update,&temp2,&P_predicted);
////
////
////
////		//output
////		qout.q0=q_update.m1;
////		qout.q1=q_update.m2;
////		qout.q2=q_update.m3;
////		qout.q3=q_update.m4;
//
//
//	  	getangle(&angle1,&angle2,&angle3,&qout);
//
//
////-----------------OUTPUT----------------------
//
//	  	myitoa((int)angle1,c);
//	  	SPI_Puts(c);delay_ms(3);SPI_PutChar(' ');
//	  	delay_ms(3);
//	  	myitoa((int)angle2,c);
//	  	SPI_Puts(c);delay_ms(3);SPI_PutChar(' ');
//	  	delay_ms(3);
//	  	myitoa((int)angle3,c);
//	  	SPI_Puts(c);delay_ms(3);SPI_PutChar(' ');
//	  	SPI_PutChar('\n');

	  	SPI_Puts("aoisdjfoiawjef\r");delay_ms(3);
				 myitoa(gyro_x,c);
				 SPI_Puts(c);SPI_Puts(" \r");
		    	 myitoa(gyro_y,c);
		    	 SPI_Puts(c);SPI_Puts(" \r");
		    	 myitoa(gyro_z,c);
		    	 SPI_Puts(c);SPI_Puts(" \r");
		    	 accel
		    	 myitoa(accel_x,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);
		    	 myitoa(accel_y,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);
		    	 myitoa(accel_z,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);
		    	 mag
		    	 myitoa(mag_x,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);
		    	 myitoa(mag_y,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);
		    	 myitoa(mag_z,c);
		    	 SPI_Puts(c);delay_ms(3);SPI_Puts(" ");delay_ms(3);

		    	 SPI_Puts("\n");

		  }//TC
	    }//while loop

	return 0;
}

















////	SPI_PutChar(temp);
//	SPI_Puts("hello");
////
//	gpio_tgl_gpio_pin(AVR32_PIN_PA23);
//	delay_ms(1000);
//

//	AVR32_SPI.IER.tdre=1;
//	temp='C';
//	Start_SS(); // pull down the CSN pin
//	TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//	TransChar(temp);
//	Stop_SS();
	//delay_ms(10);
	//temp="hello damn world!  ";


	//SPI_Puts("hello");

//
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('1');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
//		delay_ms(10);
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('2');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
//		delay_ms(10);
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('3');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
//		delay_ms(10);
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('4');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
//		delay_ms(10);
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('5');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
//		delay_ms(10);
//		Start_SS(); // pull down the CSN pin
//		CEDown();
//		TransChar(W_TX_PAYLOAD); // write the command and receive the value in the status register
//		TransChar('6');
//		//TransBlock(SPI_TxBuf, SPI_Length , NULL); // write and receive a block of data with length equals to ucLen
//		//SPI_Length--;
//		CEUp();
//		Stop_SS();
